

type Mutation {
 
  createTechnologyProcessor(
    data: TechnologyCreateInput!
  ): TechnologyResponse!

  updateTechnologyProcessor(
    data: TechnologyUpdateInput!
    where: TechnologyWhereUniqueInput!
  ): TechnologyResponse!

}


"""
  UserTechnologyLevel from 0 to 5
"""
scalar UserTechnologyLevel


type UserTechnology {

  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  CreatedBy: User
  Technology: Technology!
  components: Json
  date_from: DateTime
  date_till: DateTime
  status: UserTechnologyStatus

  """
    Уровень знания технологии
  """
  level: UserTechnologyLevel
}


input UserTechnologyCreateInput {
  id: ID
  components: Json
  date_from: DateTime
  date_till: DateTime
  status: UserTechnologyStatus
  level: UserTechnologyLevel
  CreatedBy: UserCreateOneInput
  Technology: TechnologyCreateOneWithoutUserTechnologiesInput!
}


input UserTechnologyUpdateInput {
  components: Json
  date_from: DateTime
  date_till: DateTime
  status: UserTechnologyStatus
  level: UserTechnologyLevel
  CreatedBy: UserUpdateOneInput
  Technology: TechnologyUpdateOneRequiredWithoutUserTechnologiesInput
}


type TechnologyResponse{
  success: Boolean!
  message: String
  errors: [Error!]!
  data: Technology
}



enum UserTechnologyStatus {

  """Планирую изучать"""
  PlanToStudy

  """Отказался изучать"""
  RefusedToStudy

  """Изучаю"""
  Study

  """Иногда использую"""
  RarelyUse

  """Активно использую"""
  ActiveUse

  """Больше не использую"""
  NoLongerUse

}
