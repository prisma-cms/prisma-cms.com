
 

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
  email: String
  phone: String
  showEmail: Boolean
  showPhone: Boolean
  password: String
  fullname: String
  image: String
  address: String
  sudo: Boolean
  active: Boolean
  activated: Boolean
  deleted: Boolean
  Groups(where: UserGroupWhereInput, orderBy: UserGroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserGroup!]
  CreatedUsers(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  CreatedBy(where: UserWhereInput): User
  LogedIns(where: LogedInWhereInput, orderBy: LogedInOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [LogedIn!]
  Resources(where: ResourceWhereInput, orderBy: ResourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Resource!]
  Votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote!]
  NotificationTypes(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType!]
  NotificationTypesCreated(where: NotificationTypeWhereInput, orderBy: NotificationTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationType!]
  Tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  ResourceTags(where: ResourceTagWhereInput, orderBy: ResourceTagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ResourceTag!]
  EthContractSourcesCreated(where: EthContractSourceWhereInput, orderBy: EthContractSourceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthContractSource!]
  EthAccounts(where: EthAccountWhereInput, orderBy: EthAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [EthAccount!]
  # files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  Teams(where: TeamMemberWhereInput, orderBy: TeamMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TeamMember!]
  TeamsCreated(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
  Projects(where: ProjectMemberWhereInput, orderBy: ProjectMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ProjectMember!]
  ProjectsCreated(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
  Tasks(where: TaskMemberWhereInput, orderBy: TaskMemberOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TaskMember!]
  Timers(where: TimerWhereInput, orderBy: TimerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Timer!]
  # Imports(where: ImportWhereInput, orderBy: ImportOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Import!]
  # oldID: Int
  # LettersCreated(where: LetterWhereInput, orderBy: LetterOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Letter!]
  PrismaProjects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project!]
}

# Custom
type User {
  hasEmail: Boolean!
  hasPhone: Boolean!
  marketplaceToken: String
  hidden: Boolean
}



input UserCreateInput {
  username: String
  email: String
  phone: String
  password: String
  fullname: String
  image: String
  address: String
  marketplaceToken: String
}

input UserUpdateInput {
  username: String
  phone: String
  password: String
  fullname: String
  image: String
  address: String
  email: String
  ethWalletPK: String
  ethWalletPKSendEmail: Boolean
  NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  marketplaceToken: String
  Groups: UserGroupUpdateManyWithoutUsersInput
  # CreatedUsers: UserUpdateManyWithoutCreatedByInput
  # CreatedBy: UserUpdateOneWithoutCreatedUsersInput
  # LogedIns: LogedInUpdateManyWithoutUserInput
  # Files: FileUpdateManyWithoutCreatedByInput
  # Resources: ResourceUpdateManyWithoutCreatedByInput
  # Rooms: ChatRoomUpdateManyWithoutMembersInput
  # CreatedRooms: ChatRoomUpdateManyWithoutCreatedByInput
  # Messages: ChatMessageUpdateManyWithoutCreatedByInput
  # ReadedMessages: ChatMessageReadedUpdateManyWithoutUserInput
  # Notices: NoticeUpdateManyWithoutUserInput
  # Votes: VoteUpdateManyWithoutUserInput
  # NotificationTypes: NotificationTypeUpdateManyWithoutUsersInput
  # NotificationTypesCreated: NotificationTypeUpdateManyWithoutCreatedByInput
  # Tags: TagUpdateManyWithoutCreatedByInput
  # ResourceTags: ResourceTagUpdateManyWithoutCreatedByInput
  # Teams: TeamMemberUpdateManyWithoutUserInput
  # TeamsCreated: TeamUpdateManyWithoutCreatedByInput
  # Projects: ProjectMemberUpdateManyWithoutUserInput
  # ProjectsCreated: ProjectUpdateManyWithoutCreatedByInput
  # Tasks: TaskMemberUpdateManyWithoutUserInput
  # Timers: TimerUpdateManyWithoutCreatedByInput
  # PositionsCreated: PositionUpdateManyWithoutCreatedByInput
  # Positions: PositionUpdateManyWithoutUsersInput
  # TasksReactions: TaskReactionUpdateManyWithoutCreatedByInput
  # EthContractSourcesCreated: EthContractSourceUpdateManyInput
  # EthAccounts: EthAccountUpdateManyWithoutCreatedByInput
  # PrismaProjects: ProjectUpdateManyWithoutPrismaUsersInput
  # LettersCreated: LetterUpdateManyWithoutUserInput
}

input UserWhereInput {
  search: String
}
